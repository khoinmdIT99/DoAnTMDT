// <auto-generated />
using System;
using Domain.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseTools.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20201026083725_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Application.Entities.MailSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SenderEmail")
                        .HasColumnName("SENDER_EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpPassword")
                        .HasColumnName("SMTP_PASSWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmtpPort")
                        .HasColumnName("SMTP_PORT")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasColumnName("SMTP_SERVER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpUsername")
                        .HasColumnName("SMTP_USERNAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MAIL_SETTING");
                });

            modelBuilder.Entity("Domain.Application.Entities.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("CONTROLLER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("DISPLAY_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("HierarchyCode")
                        .IsRequired()
                        .HasColumnName("HIERARCHY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnName("ICON")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnName("ORDER")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MENUS");
                });

            modelBuilder.Entity("Domain.Application.Entities.MenuRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MenuId")
                        .HasColumnName("MENU_ID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnName("ROLE_ID")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MENU_ROLE");
                });

            modelBuilder.Entity("Domain.Application.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoleCode")
                        .HasColumnName("ROLE_CODE")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoleName")
                        .HasColumnName("ROLE_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("Domain.Application.Entities.SSOSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EnableGoogleAuth0")
                        .HasColumnName("ENABLE_GOOGLE_AUTH0")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleClientId")
                        .HasColumnName("GOOGLE_CLIENT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleClientSecret")
                        .HasColumnName("GOOGLE_CLIENT_SECRET")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SSO_SETTING");
                });

            modelBuilder.Entity("Domain.Application.Entities.SiteSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("DefaultPageSize")
                        .HasColumnName("DEFAULT_PAGE_SIZE")
                        .HasColumnType("int");

                    b.Property<string>("FooterData")
                        .HasColumnName("FOOTER_DATA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnName("ICON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnName("LOGO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageEmail")
                        .IsRequired()
                        .HasColumnName("PAGE_EMAIL")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PageSizeOptions")
                        .HasColumnName("PAGE_SIZE_OPTIONS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasColumnName("PAGE_TITLE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("ShowFooter")
                        .HasColumnName("SHOW_FOOTER")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SITE_SETTING");
                });

            modelBuilder.Entity("Domain.Application.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnName("DAY_OF_BIRTH")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .HasColumnName("FULL_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Gender")
                        .HasColumnName("GENDER")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnName("PASSWORD")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PHONE_NO")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ProfileImage")
                        .HasColumnName("PROFILE_IMAGE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Domain.Application.Entities.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoleId")
                        .HasColumnName("ROLE_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("USER_ROLE");
                });

            modelBuilder.Entity("Domain.Application.Entities.MenuRole", b =>
                {
                    b.HasOne("Domain.Application.Entities.Menu", null)
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId");

                    b.HasOne("Domain.Application.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Domain.Application.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Application.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Application.Entities.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
