// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Application;

namespace DatabaseTools.Migrations.ShopDB
{
    [DbContext(typeof(ShopDBContext))]
    [Migration("20201030151932_init5")]
    partial class init5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Shop.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogCategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TITLE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BLOGS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogCategoryName")
                        .HasColumnName("BLOG_CATEGORY_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HierarchyCode")
                        .HasColumnName("HIERARCHY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BLOG_CATEGORIES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogId")
                        .HasColumnName("BLOG_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BLOG_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CUSTOMER_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("Discount")
                        .HasColumnName("DISCOUNT")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountPercent")
                        .HasColumnName("DISCOUNT_PERCENT")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PaymentMethod")
                        .HasColumnName("PAYMENT_METHOD")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddressId")
                        .HasColumnName("SHIPPING_ADDRESS_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("ShippingFee")
                        .HasColumnName("SHIPPING_FEE")
                        .HasColumnType("bigint");

                    b.Property<int>("ShippingMethod")
                        .HasColumnName("SHIPPING_METHOD")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.Property<long>("Tax")
                        .HasColumnName("TAX")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxPercent")
                        .HasColumnName("TAX_PERCENT")
                        .HasColumnType("int");

                    b.Property<long>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("bigint");

                    b.Property<long>("Totalprice")
                        .HasColumnName("TOTAL_PRICE")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("CARTS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CartProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Bought")
                        .HasColumnName("BOUGHT")
                        .HasColumnType("bit");

                    b.Property<string>("CartId")
                        .HasColumnName("CART_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("bigint");

                    b.Property<int?>("PriceType")
                        .HasColumnName("PRICE_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Quantity")
                        .HasColumnName("QUANTITY")
                        .HasColumnType("int");

                    b.Property<long>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CART_PRODUCT");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .HasColumnName("CATEGORY_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("HierarchyCode")
                        .HasColumnName("HIERARCHY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .HasColumnName("FULL_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnName("PASSWORD")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PHONE_NO")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Province")
                        .HasColumnName("PROVINCE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMERS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CUSTOMER_ID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Feedback")
                        .HasColumnName("FEEDBACK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnName("INDEX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CUSTOMER_FEEDBACK");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedbackImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerFeedbackId")
                        .HasColumnName("CUSTOMER_FEEDBACK_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerFeedbackId")
                        .IsUnique()
                        .HasFilter("[CUSTOMER_FEEDBACK_ID] IS NOT NULL");

                    b.ToTable("CUSTOMER_FEEDBACK_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.District", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DISTRICT");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Ba Đình",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Bắc Từ Liêm",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cầu Giấy",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Đống Đa",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Hà Đông",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Hải Châu",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Cẩm Lệ",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Liên Chiểu",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Ngũ Hành Sơn",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Sơn Trà",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "11",
                            Name = "Quận 1",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "12",
                            Name = "Quận 2",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "13",
                            Name = "Quận 3",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "14",
                            Name = "Quận 4",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "15",
                            Name = "Quận 5",
                            ProvinceId = "3"
                        });
                });

            modelBuilder.Entity("Domain.Shop.Entities.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialName")
                        .HasColumnName("MATERIAL_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnName("NOTE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MATERIALS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MaterialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("bigint");

                    b.Property<int?>("PriceType")
                        .HasColumnName("PRICE_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnName("PRODUCT_CODE")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("PRODUCT_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProductTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductId")
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnName("APPROVED")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Review")
                        .HasColumnName("REVIEW")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnName("STAR")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_REVIEW");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnName("TAG_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("PRODUCT_TAG");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("TYPE_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PRODUCT_TYPES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PROVINCE");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShippingAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnName("PROVINCE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SHIPPING_ADDRESS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hotline")
                        .HasColumnName("HOTLINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("MainAddress")
                        .HasColumnName("IS_MAIN_ADDRESS")
                        .HasColumnType("bit");

                    b.Property<string>("ShopSettingId")
                        .IsRequired()
                        .HasColumnName("SHOP_SETTING_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopSettingId");

                    b.ToTable("SHOP_ADDRESS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Keyword")
                        .HasColumnName("KEYWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageDescription")
                        .HasColumnName("PAGE_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnName("PAGE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pagetitle")
                        .IsRequired()
                        .HasColumnName("PAGE_TITLE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxPercent")
                        .HasColumnName("TAX_PERCENT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SHOP_SETTING");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TAGS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Blog", b =>
                {
                    b.HasOne("Domain.Shop.Entities.BlogCategory", null)
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Blog", null)
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Shop.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CartProduct", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Category", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedback", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedbackImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.CustomerFeedback", null)
                        .WithOne("CustomerFeedbackImage")
                        .HasForeignKey("Domain.Shop.Entities.CustomerFeedbackImage", "CustomerFeedbackId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.District", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Product", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Shop.Entities.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Domain.Shop.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductReview", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductTag", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopAddress", b =>
                {
                    b.HasOne("Domain.Shop.Entities.ShopSetting", null)
                        .WithMany("ShopAddresses")
                        .HasForeignKey("ShopSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
