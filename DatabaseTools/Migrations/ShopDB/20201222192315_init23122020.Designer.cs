// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Application;

namespace DatabaseTools.Migrations.ShopDB
{
    [DbContext(typeof(ShopDBContext))]
    [Migration("20201222192315_init23122020")]
    partial class init23122020
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Shop.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogCategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TITLE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BLOGS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogCategoryName")
                        .HasColumnName("BLOG_CATEGORY_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HierarchyCode")
                        .HasColumnName("HIERARCHY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BLOG_CATEGORIES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BlogId")
                        .HasColumnName("BLOG_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BLOG_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CUSTOMER_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("Discount")
                        .HasColumnName("DISCOUNT")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountPercent")
                        .HasColumnName("DISCOUNT_PERCENT")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PaymentMethod")
                        .HasColumnName("PAYMENT_METHOD")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddressId")
                        .HasColumnName("SHIPPING_ADDRESS_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("ShippingFee")
                        .HasColumnName("SHIPPING_FEE")
                        .HasColumnType("bigint");

                    b.Property<int>("ShippingMethod")
                        .HasColumnName("SHIPPING_METHOD")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Tax")
                        .HasColumnName("TAX")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxPercent")
                        .HasColumnName("TAX_PERCENT")
                        .HasColumnType("int");

                    b.Property<string>("TinhTrangDanhGiaCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("int");

                    b.Property<long>("Totalprice")
                        .HasColumnName("TOTAL_PRICE")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("CARTS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnName("CART_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductId")
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Bought")
                        .HasColumnName("BOUGHT")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("DiemCustomerDanhGia")
                        .HasColumnType("float");

                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("NgayGiao")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("bigint");

                    b.Property<int?>("PriceType")
                        .HasColumnName("PRICE_TYPE")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("QUANTITY")
                        .HasColumnType("int");

                    b.Property<string>("TinhTrangChiTiet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("bigint");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CART_PRODUCT");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("CATEGORY_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("HierarchyCode")
                        .HasColumnName("HIERARCHY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NoiThat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Slug")
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FULL_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PHONE_NO")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Province")
                        .HasColumnName("PROVINCE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TinhTrang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMERS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CUSTOMER_ID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Feedback")
                        .HasColumnName("FEEDBACK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnName("INDEX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CUSTOMER_FEEDBACK");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedbackImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerFeedbackId")
                        .HasColumnName("CUSTOMER_FEEDBACK_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerFeedbackId")
                        .IsUnique()
                        .HasFilter("[CUSTOMER_FEEDBACK_ID] IS NOT NULL");

                    b.ToTable("CUSTOMER_FEEDBACK_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.DiemTichLuy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Diem")
                        .HasColumnType("int");

                    b.Property<string>("HoadonId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdHoaDon")
                        .HasColumnType("int");

                    b.Property<int>("IdKhachHang")
                        .HasColumnType("int");

                    b.Property<string>("KhachhangId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HoadonId");

                    b.HasIndex("KhachhangId");

                    b.ToTable("DiemTichLuy");
                });

            modelBuilder.Entity("Domain.Shop.Entities.District", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DISTRICT");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Ba Đình",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Bắc Từ Liêm",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cầu Giấy",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Đống Đa",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Hà Đông",
                            ProvinceId = "1"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Hải Châu",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Cẩm Lệ",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Liên Chiểu",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Ngũ Hành Sơn",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Sơn Trà",
                            ProvinceId = "2"
                        },
                        new
                        {
                            Id = "11",
                            Name = "Quận 1",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "12",
                            Name = "Quận 2",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "13",
                            Name = "Quận 3",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "14",
                            Name = "Quận 4",
                            ProvinceId = "3"
                        },
                        new
                        {
                            Id = "15",
                            Name = "Quận 5",
                            ProvinceId = "3"
                        });
                });

            modelBuilder.Entity("Domain.Shop.Entities.ImportBill", b =>
                {
                    b.Property<int>("IdImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdSupplier")
                        .HasColumnType("int");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TienNo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdImport");

                    b.HasIndex("IdSupplier");

                    b.ToTable("ImportBill");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ImportBillDetail", b =>
                {
                    b.Property<int>("IdDetailImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("IdImport")
                        .HasColumnType("int");

                    b.Property<string>("IdProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailImport");

                    b.HasIndex("IdImport");

                    b.ToTable("ImportBillDetails");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialName")
                        .HasColumnName("MATERIAL_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnName("NOTE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MATERIALS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Actived")
                        .HasColumnType("bit");

                    b.Property<int>("BasketCount")
                        .HasColumnType("int");

                    b.Property<int>("BuyCount")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<double?>("ExtraDiscount")
                        .HasColumnType("float");

                    b.Property<int?>("IdSupplier")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MaterialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("bigint");

                    b.Property<double?>("PriceAfter")
                        .HasColumnType("float");

                    b.Property<int?>("PriceType")
                        .HasColumnName("PRICE_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnName("PRODUCT_CODE")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("PRODUCT_NAME")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProductTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("SLUG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IdSupplier");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnName("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductId")
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("THUMB_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_IMAGE");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnName("APPROVED")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Review")
                        .HasColumnName("REVIEW")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnName("STAR")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_REVIEW");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("PRODUCT_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnName("TAG_ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("PRODUCT_TAG");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("TYPE_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PRODUCT_TYPES");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PROVINCE");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShippingAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnName("PROVINCE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SHIPPING_ADDRESS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnName("CREATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnName("CREATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hotline")
                        .HasColumnName("HOTLINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnName("LAST_UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATE_BY")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("MainAddress")
                        .HasColumnName("IS_MAIN_ADDRESS")
                        .HasColumnType("bit");

                    b.Property<string>("ShopSettingId")
                        .IsRequired()
                        .HasColumnName("SHOP_SETTING_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopSettingId");

                    b.ToTable("SHOP_ADDRESS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Keyword")
                        .HasColumnName("KEYWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageDescription")
                        .HasColumnName("PAGE_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnName("PAGE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pagetitle")
                        .IsRequired()
                        .HasColumnName("PAGE_TITLE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxPercent")
                        .HasColumnName("TAX_PERCENT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SHOP_SETTING");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Slider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoName")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Icn")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.ForgetPassword", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveCode")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("ActiveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestIp")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForgetPassword");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToRoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToRoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.PhanQuyen", b =>
                {
                    b.Property<int>("MaQuyen")
                        .HasColumnType("int");

                    b.Property<string>("MaTaiKhoan")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaQuyen", "MaTaiKhoan");

                    b.HasIndex("MaTaiKhoan");

                    b.ToTable("PhanQuyen");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.Quyen", b =>
                {
                    b.Property<int>("MaQuyen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenQuyen")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("MaQuyen");

                    b.ToTable("Quyen");

                    b.HasData(
                        new
                        {
                            MaQuyen = 1,
                            TenQuyen = "Quản trị"
                        },
                        new
                        {
                            MaQuyen = 2,
                            TenQuyen = "Nhân viên"
                        },
                        new
                        {
                            MaQuyen = 3,
                            TenQuyen = "Khách hàng"
                        },
                        new
                        {
                            MaQuyen = 4,
                            TenQuyen = "Khách hàng thân thiết"
                        });
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.SystemInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("AlbumSlide")
                        .HasColumnType("bigint");

                    b.Property<long?>("BottomAlbum")
                        .HasColumnType("bigint");

                    b.Property<long?>("BottomMenu")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Copyright")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FacebookAppId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FacebookPage")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("HotLine")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<long?>("LeftArticle1")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeftArticle2")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeftArticle3")
                        .HasColumnType("bigint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("MainMenu")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<long?>("RightAlbum")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightArticle1")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightArticle2")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightArticle3")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightMenu")
                        .HasColumnType("bigint");

                    b.Property<string>("SMTPEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SMTPName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SMTPPassword")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("TaxiFare")
                        .HasColumnType("bigint");

                    b.Property<string>("WebsiteAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SystemInformation");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.ThongBao", b =>
                {
                    b.Property<int>("MaThongBao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BuyerSeen")
                        .HasColumnType("bit");

                    b.Property<string>("MaDdh")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaTaiKhoan")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SellerSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.HasKey("MaThongBao");

                    b.HasIndex("MaDdh");

                    b.HasIndex("MaTaiKhoan");

                    b.ToTable("ThongBaos");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.TinNhan", b =>
                {
                    b.Property<int>("MaTinNhan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BuyerSeen")
                        .HasColumnType("bit");

                    b.Property<string>("MaDdh")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaTaiKhoan")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SellerSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.HasKey("MaTinNhan");

                    b.HasIndex("MaDdh");

                    b.HasIndex("MaTaiKhoan");

                    b.ToTable("TinNhans");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.TranhChap", b =>
                {
                    b.Property<int>("MaTranhChap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LienHe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaDDH")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("MaTranhChap");

                    b.HasIndex("MaDDH");

                    b.ToTable("TranhChaps");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.XacMinh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id_User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timer")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("XacMinhs");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TAGS");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Blog", b =>
                {
                    b.HasOne("Domain.Shop.Entities.BlogCategory", null)
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.BlogImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Blog", null)
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Shop.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CartProduct", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedback", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.CustomerFeedbackImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.CustomerFeedback", null)
                        .WithOne("CustomerFeedbackImage")
                        .HasForeignKey("Domain.Shop.Entities.CustomerFeedbackImage", "CustomerFeedbackId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.DiemTichLuy", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "Hoadon")
                        .WithMany()
                        .HasForeignKey("HoadonId");

                    b.HasOne("Domain.Shop.Entities.Customer", "Khachhang")
                        .WithMany("ListDiemTichLuy")
                        .HasForeignKey("KhachhangId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.District", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ImportBill", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Supplier", "Supplier")
                        .WithMany("ImportBills")
                        .HasForeignKey("IdSupplier");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ImportBillDetail", b =>
                {
                    b.HasOne("Domain.Shop.Entities.ImportBill", "ImportBill")
                        .WithMany("DetailImports")
                        .HasForeignKey("IdImport")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Shop.Entities.Product", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("IdSupplier");

                    b.HasOne("Domain.Shop.Entities.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductReview", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Domain.Shop.Entities.ProductTag", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.ShopAddress", b =>
                {
                    b.HasOne("Domain.Shop.Entities.ShopSetting", null)
                        .WithMany("ShopAddresses")
                        .HasForeignKey("ShopSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.Message", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "FromUser")
                        .WithMany("Messages")
                        .HasForeignKey("FromUserId");

                    b.HasOne("Domain.Shop.Entities.SystemManage.Room", "ToRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ToRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.PhanQuyen", b =>
                {
                    b.HasOne("Domain.Shop.Entities.SystemManage.Quyen", "Quyen")
                        .WithMany("PhanQuyens")
                        .HasForeignKey("MaQuyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shop.Entities.Customer", "TaiKhoan")
                        .WithMany()
                        .HasForeignKey("MaTaiKhoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.Room", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Customer", "Admin")
                        .WithMany("Rooms")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.ThongBao", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "DonDatHang")
                        .WithMany()
                        .HasForeignKey("MaDdh");

                    b.HasOne("Domain.Shop.Entities.Customer", "TaiKhoan")
                        .WithMany()
                        .HasForeignKey("MaTaiKhoan");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.TinNhan", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "DonDatHang")
                        .WithMany()
                        .HasForeignKey("MaDdh");

                    b.HasOne("Domain.Shop.Entities.Customer", "TaiKhoan")
                        .WithMany()
                        .HasForeignKey("MaTaiKhoan");
                });

            modelBuilder.Entity("Domain.Shop.Entities.SystemManage.TranhChap", b =>
                {
                    b.HasOne("Domain.Shop.Entities.Cart", "DonDatHang")
                        .WithMany()
                        .HasForeignKey("MaDDH");
                });
#pragma warning restore 612, 618
        }
    }
}
