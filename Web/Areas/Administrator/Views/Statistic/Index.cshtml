
@{
    var list_data = (List<Domain.Shop.Dto.DataChart>)ViewBag.DataChart;
    var SalesedQuantity = (int?)ViewBag.SalesedQuantity;
    var RemainingQuantity = (int?)ViewBag.RemainingQuantity;
    var TotalQuantity = (int?)ViewBag.SalesedQuantity + (int?)ViewBag.RemainingQuantity;
    float? PercentSalesedQuantity = ((float)SalesedQuantity / TotalQuantity) * 100;
    float? PercentRemainingQuantity = ((float)RemainingQuantity / TotalQuantity) * 100;
    var lstTotalMoneyWithMonth = ViewBag.TotalMoneyWithMonth;
}
<section class="content" onload="getData()">
    <div class="row">
        <div class="col-lg-4 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3>@ViewBag.Orders</h3>
                    <p>Đơn hàng hôm nay</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bag"></i>
                </div>
                <a href="/admin/order" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div><!-- ./col -->

        <div class="col-lg-4 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-red">
                <div class="inner">
                    <h3>@ViewBag.Category</h3>
                    <p>Category</p>
                </div>
                <div class="icon">
                    <i class="ion ion-pie-graph"></i>
                </div>
                <a href="/Admin/Revenue/ByYear" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div><!-- ./col -->

        <div class="col-lg-4 col-xs-12">
            <!-- small box -->
            <div class="small-box bg-green">
                <div class="inner">
                    <h3>@ViewBag.Product</h3>
                    <p>Product</p>
                </div>
                <div class="icon">
                    <i class="ion ion-pie-graph"></i>
                </div>
                <a href="/Admin/Products" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div><!-- ./col -->
    </div><!-- /.row -->
    <!-- Main row -->

    <div class="row">

        <section class="col-lg-12 connectedSortable">
            <!-- solid sales graph -->
            <div class="box box-solid bg-teal-gradient">
                <div class="box-header">
                    <i class="fa fa-th"></i>
                    <h3 class="box-title">Biểu đồ doanh số bán hàng</h3>
                </div>
                <div class="box-body border-radius-none ">
                    <div class="chart" id="line-chart" style="height: 250px;"></div>
                </div><!-- /.box-body -->
                <div class="box-footer no-border">
                    <p style="color:#c5c0c0"><i>(&lowast;)Số liệu 12 tháng gần đây</i></p>
                </div><!-- /.box-footer -->
            </div><!-- /.box -->
        </section>
    </div>
    <div class="row">
        <div class="col-md-5 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Thống kê tỉ lệ sản phẩm</h4>
                    <input type="text" value="@PercentSalesedQuantity.ToString()" id="txtSalesedQuantity" style="display:none" />
                    <input type="text" value="@PercentRemainingQuantity.ToString()" id="txtRemainingQuantity" style="display:none" />
                    <canvas id="myChart"></canvas>
                    <div id="traffic-chart-legend" class="rounded-legend legend-vertical legend-bottom-left pt-4"></div>
                </div>
            </div>
        </div>
        <div class="col-md-7 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <div class="clearfix">
                        <h4 class="card-title float-left">Biểu đồ doanh số theo tháng (doanh thu nhập / doanh thu tháng)</h4>
                        <div id="visit-sale-chart-legend" class="rounded-legend legend-horizontal legend-top-right float-right"></div>
                        <input type="text" value="@lstTotalMoneyWithMonth" id="txtlistmonth" style="display:none" />
                    </div>
                    <canvas id="visit-sale-chart" class="mt-4"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
            <div class="dashboard-stat2 ">
                <div class="display">
                    <div class="number" id="total-profit"></div>
                    <div class="icon">
                        <i class="icon-like"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
            <div class="dashboard-stat2 ">
                <div class="display">
                    <div class="number" id="total-inventory-value"></div>
                    <div class="icon">
                        <i class="icon-pie-chart"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
            <div class="dashboard-stat2 ">
                <div class="display">
                    <div class="number" id="new-order"></div>
                    <div class="icon">
                        <i class="icon-basket"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
            <div class="dashboard-stat2 ">
                <div class="display">
                    <div class="number" id="new-user"></div>
                    <div class="icon">
                        <i class="icon-user"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Revenue Recent Five Month</h4>
                    <div id="chartdiv"></div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Finance</h4>
                    <div id="chartdiv2"></div>
                </div>
            </div>
        </div>

    </div>
</section>
@section scripts{
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">
    @*<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>*@
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <script src="~/dist/Chart/dashboard.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
    @*<script src="https://code.jquery.com/jquery-3.5.0.js"></script>*@
    @*<script>
            $('#traffic-chart').myfunction();
        </script>*@
    <script>
        $(document).ready(function () {
            $.ajax({
                method: 'POST',
                url: '/Administrator/Statistic/GetCommonInfo_JSON',
                success: function (result) {
                    var value = '<h3 class="font-green-sharp">';
                    value += '<span data-counter="counterup">' + makeNumber(result['totalRevenue']) + '</span>';
                    value += '<small class="font-green-sharp"> VND</small>';
                    value += '</h3>';
                    value += '<small>TOTAL PROFIT</small>';
                    document.getElementById('total-profit').innerHTML = value;

                    value = '<h3 class="font-red-haze">';
                    value += '<span data-counter="counterup">' + makeNumber(result['totalProductValue']) + '</span>';
                    value += '<small class="font-green-sharp"> VND</small>';
                    value += '</h3>';
                    value += '<small>TOTAL INVENTORY VALUE</small>';
                    document.getElementById('total-inventory-value').innerHTML = value;

                    value = '<h3 class="font-blue-sharp">';
                    value += '<span data-counter="counterup">' + result['totalSaleBillCount'] + '</span>';
                    value += '</h3>';
                    value += '<small>NEW ORDERS</small>';
                    document.getElementById('new-order').innerHTML = value;

                    value = '<h3 class="font-purple-soft">';
                    value += '<span data-counter="counterup">' + result['totalCustomer'] + '</span>';
                    value += '</h3>';
                    value += '<small>NEW USERS</small>';
                    document.getElementById('new-user').innerHTML = value;

                    console.log(makeNumber(result['totalSaleBillCount']));
                },
                error: function (err) {
                    console.log(err);
                }
            });
        });
        function makeNumber(num) {
            var value = '';
            if (num === 0) {
                value = "0";
            } else {
                var count = 0;
                var number = num < 0 ? -num : num;

                while (number >= 1) {
                    count++;
                    value = number % 10 + value;
                    number = Math.floor(number / 10);
                    if (count % 3 === 0 && number >= 1) {
                        value = '.' + value;
                    }
                }
                if (num < 0) {
                    value = '-' + value;
                }
            }
            return value;
        }
    </script>
    <script>
        var ctx = document.getElementById('myChart').getContext("2d");
        var gradientStrokeBlue = ctx.createLinearGradient(0, 0, 0, 181);
        gradientStrokeBlue.addColorStop(0, 'rgba(54, 215, 232, 1)');
        gradientStrokeBlue.addColorStop(1, 'rgba(177, 148, 250, 1)');
        var gradientLegendBlue = 'linear-gradient(to right, rgba(54, 215, 232, 1), rgba(177, 148, 250, 1))';

        var gradientStrokeRed = ctx.createLinearGradient(0, 0, 0, 50);
        gradientStrokeRed.addColorStop(0, 'rgba(255, 191, 150, 1)');
        gradientStrokeRed.addColorStop(1, 'rgba(254, 112, 150, 1)');
        var gradientLegendRed = 'linear-gradient(to right, rgba(255, 191, 150, 1), rgba(254, 112, 150, 1))';

        var gradientStrokeGreen = ctx.createLinearGradient(0, 0, 0, 300);
        gradientStrokeGreen.addColorStop(0, 'rgba(6, 185, 157, 1)');
        gradientStrokeGreen.addColorStop(1, 'rgba(132, 217, 210, 1)');
        var gradientLegendGreen = 'linear-gradient(to right, rgba(6, 185, 157, 1), rgba(132, 217, 210, 1))';
        var SalesedQuantity = $('#txtSalesedQuantity').val();
        var RemainingQuantity = $('#txtRemainingQuantity').val();
        var trafficChartData = {
            datasets: [{
                data: [SalesedQuantity, RemainingQuantity],
                backgroundColor: [
                    gradientStrokeBlue,
                    gradientStrokeGreen,
                    gradientStrokeRed
                ],
                hoverBackgroundColor: [
                    gradientStrokeBlue,
                    gradientStrokeGreen,
                    gradientStrokeRed
                ],
                borderColor: [
                    gradientStrokeBlue,
                    gradientStrokeGreen,
                    gradientStrokeRed
                ],
                legendColor: [
                    gradientLegendBlue,
                    gradientLegendGreen,
                    gradientLegendRed
                ]
            }],

            // These labels appear in the legend and in the tooltips when hovering different arcs
            labels: [
                'Phần trăm sản phẩm đã bán',
                'Phần trăm sản phẩm còn lại (tồn kho)'
            ]
        };
        var trafficChartOptions = {
            responsive: true,
            animation: {
                animateScale: true,
                animateRotate: true
            },
            legend: false,
            legendCallback: function (chart) {
                var text = [];
                text.push('<ul>');
                for (var i = 0; i < trafficChartData.datasets[0].data.length; i++) {
                    text.push('<li><span class="legend-dots" style="background:' +
                        trafficChartData.datasets[0].legendColor[i] +
                        '"></span>');
                    if (trafficChartData.labels[i] === "Phần trăm sản phẩm đã bán") {
                        text.push(trafficChartData.labels[i]);
                        text.push('<span class="float-right">' + SalesedQuantity + "%" + '</span>');
                    }
                    else {
                        text.push(trafficChartData.labels[i]);
                        text.push('<span class="float-right">' + RemainingQuantity + "%" + '</span>');
                    }
                }
                text.push('</ul>');
                return text.join('');
            }
        };
        var myChart = new Chart(ctx, {
            type: 'doughnut',
            data: trafficChartData,
            options: trafficChartOptions
        });
        $("#traffic-chart-legend").html(myChart.generateLegend());
    </script>
    <script type="text/javascript">
        var line = new Morris.Line({
            element: 'line-chart',
            resize: true,
            data: [
                @foreach (var i in list_data) {
                    @Html.Raw("{y:'"+i.Label + "',item1:"+i.Value + "},");

                 }

            ],
            //xLabelFormat: function (x) { return x.toString() +""; },
            //xLabels: "day",
            xkey: 'y',
            ykeys: ['item1'],
            labels: ['Doanh số'],
            lineColors: ['#efefef'],
            // lineWidth: 2,
            //  hideHover: 'auto',
            gridTextColor: "#fff",
            //  gridStrokeWidth: 0.4,
            // pointSize: 4,
            // pointStrokeColors: ["#efefef"],
            gridLineColor: "#efefef",
            gridTextFamily: "Open Sans",
            gridTextSize: 10
        });

    </script>
    <script>
        var ctx = document.getElementById('visit-sale-chart').getContext("2d");
        var gradientStrokeViolet = ctx.createLinearGradient(0, 0, 0, 181);
        gradientStrokeViolet.addColorStop(0, 'rgba(218, 140, 255, 1)');
        gradientStrokeViolet.addColorStop(1, 'rgba(154, 85, 255, 1)');
        var gradientLegendViolet = 'linear-gradient(to right, rgba(218, 140, 255, 1), rgba(154, 85, 255, 1))';

        var gradientStrokeBlue = ctx.createLinearGradient(0, 0, 0, 360);
        gradientStrokeBlue.addColorStop(0, 'rgba(54, 215, 232, 1)');
        gradientStrokeBlue.addColorStop(1, 'rgba(177, 148, 250, 1)');
        var gradientLegendBlue = 'linear-gradient(to right, rgba(54, 215, 232, 1), rgba(177, 148, 250, 1))';

        var gradientStrokeRed = ctx.createLinearGradient(0, 0, 0, 300);
        gradientStrokeRed.addColorStop(0, 'rgba(255, 191, 150, 1)');
        gradientStrokeRed.addColorStop(1, 'rgba(254, 112, 150, 1)');
        var gradientLegendRed = 'linear-gradient(to right, rgba(255, 191, 150, 1), rgba(254, 112, 150, 1))';

        var lst = jQuery.parseJSON($('#txtlistmonth').val());
        var myChart = new Chart(ctx,
            {
                type: 'bar',
                data: {
                    labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
                    datasets: [
                        {
                            label: "PercentTotalMoney",
                            borderColor: gradientStrokeViolet,
                            backgroundColor: gradientStrokeRed,
                            hoverBackgroundColor: gradientStrokeBlue,
                            legendColor: gradientLegendViolet,
                            pointRadius: 0,
                            fill: false,
                            borderWidth: 1,
                            fill: 'origin',
                            data: lst
                        }
                    ]
                },
                options: {
                    responsive: true,
                    legend: false,
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul>');
                        for (var i = 0; i < chart.data.datasets.length; i++) {
                            text.push('<li><span class="legend-dots" style="background:' +
                                chart.data.datasets[i].legendColor +
                                '"></span>');
                            if (chart.data.datasets[i].label) {
                                text.push(chart.data.datasets[i].label);
                            }
                            text.push('</li>');
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    scales: {
                        yAxes: [
                            {
                                ticks: {
                                    display: false,
                                    min: 0,
                                    stepSize: 20,
                                    max: 100
                                },
                                gridLines: {
                                    drawBorder: false,
                                    color: 'rgba(235,237,242,1)',
                                    zeroLineColor: 'rgba(235,237,242,1)'
                                }
                            }
                        ],
                        xAxes: [
                            {
                                gridLines: {
                                    display: false,
                                    drawBorder: false,
                                    color: 'rgba(0,0,0,1)',
                                    zeroLineColor: 'rgba(235,237,242,1)'
                                },
                                ticks: {
                                    padding: 20,
                                    fontColor: "#9c9fa6",
                                    autoSkip: true,
                                },
                                categoryPercentage: 0.5,
                                barPercentage: 0.5
                            }
                        ]
                    }
                },
                elements: {
                    point: {
                        radius: 0
                    }
                }
            });
        $("#visit-sale-chart-legend").html(myChart.generateLegend());
    </script>
    <script>
        var res;
        $(document).ready(function () {
            $.ajax({
                method: 'POST',
                url: '/Administrator/Statistic/GetTotalSaleImportInMonths_JSON?startMonth=' + 1 + '&startYear=' + 2021 + '&endMonth=' + 6 + '&endYear=' + 2021,
                success: function (result) {
                    res = result;
                    var chartData = [{
                        "month": res[0]['Month'],
                        "revenue": res[0]['TotalRevenue'] / 1000000,
                        "expenses": res[0]['TotalImport'] / 1000000,
                        "income": res[0]['TotalSale'] / 1000000
                    }, {
                        "month": res[1]['Month'],
                        "revenue": res[1]['TotalRevenue'] / 1000000,
                        "expenses": res[1]['TotalImport'] / 1000000,
                        "income": res[1]['TotalSale'] / 1000000
                    }, {
                        "month": res[2]['Month'],
                        "revenue": res[2]['TotalRevenue'] / 1000000,
                        "expenses": res[2]['TotalImport'] / 1000000,
                        "income": res[2]['TotalSale'] / 1000000
                    }, {
                        "month": res[3]['Month'],
                        "revenue": res[3]['TotalRevenue'] / 1000000,
                        "expenses": res[3]['TotalImport'] / 1000000,
                        "income": res[3]['TotalSale'] / 1000000
                    }, {
                        "month": res[4]['Month'],
                        "revenue": res[4]['TotalRevenue'] / 1000000,
                        "expenses": res[4]['TotalImport'] / 1000000,
                        "income": res[4]['TotalSale'] / 1000000
                    }, {
                        "month": res[5]['Month'],
                        "revenue": res[5]['TotalRevenue'] / 1000000,
                        "expenses": res[5]['TotalImport'] / 1000000,
                        "income": res[5]['TotalSale'] / 1000000
                        }];
                    am4core.ready(function () {

                        // Themes begin
                        am4core.useTheme(am4themes_animated);
                        // Themes end

                        var chart = am4core.create("chartdiv", am4charts.XYChart);
                        chart.hiddenState.properties.opacity = 0; // this makes initial fade in effect
                        function createSeries(value, name) {
                            var series = chart.series.push(new am4charts.ColumnSeries())
                            series.dataFields.valueY = value
                            series.dataFields.categoryX = 'category'
                            series.name = name

                            series.events.on("hidden", arrangeColumns);
                            series.events.on("shown", arrangeColumns);

                            var bullet = series.bullets.push(new am4charts.LabelBullet())
                            bullet.interactionsEnabled = false
                            bullet.dy = 30;
                            bullet.label.text = '{valueY}'
                            bullet.label.fill = am4core.color('#ffffff')

                            return series;
                        }
                        chart.data = [{
                            "country": res[0]['Month'],
                            "value1": res[0]['TotalRevenue'] / 1000000,
                            "value2": res[0]['TotalImport'] / 1000000,
                            "value3": res[0]['TotalSale'] / 1000000
                        }, {
                                "country": res[1]['Month'],
                                "value1": res[1]['TotalRevenue'] / 1000000,
                                "value2": res[1]['TotalImport'] / 1000000,
                                "value3": res[1]['TotalSale'] / 1000000
                            }, {
                                "country": res[2]['Month'],
                                "value1": res[2]['TotalRevenue'] / 1000000,
                                "value2": res[2]['TotalImport'] / 1000000,
                                "value3": res[2]['TotalSale'] / 1000000
                            },
                            {
                                "country": res[3]['Month'],
                                "value1": res[3]['TotalRevenue'] / 1000000,
                                "value2": res[3]['TotalImport'] / 1000000,
                                "value3": res[3]['TotalSale'] / 1000000
                            },
                            {
                                "country": res[4]['Month'],
                                "value1": res[4]['TotalRevenue'] / 1000000,
                                "value2": res[4]['TotalImport'] / 1000000,
                                "value3": res[4]['TotalSale'] / 1000000
                            },
                            {
                                "country": res[5]['Month'],
                                "value1": res[5]['TotalRevenue'] / 1000000,
                                "value2": res[5]['TotalImport'] / 1000000,
                                "value3": res[5]['TotalSale'] / 1000000
                            }];
                       
                        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                        categoryAxis.renderer.grid.template.location = 0;
                        categoryAxis.dataFields.category = "country";
                        categoryAxis.renderer.minGridDistance = 40;

                        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

                        var series = chart.series.push(new am4charts.CurvedColumnSeries());
                        series.dataFields.categoryX = "country";

                        series.dataFields.valueY = "value1";
                        series.tooltipText = "Tiền lời {valueY.value}.000.000 VNĐ";
                        series.columns.template.strokeOpacity = 0;
                        series.clustered = false;
                        series.hiddenState.properties.visible = true; // this is added in case legend is used and first series is hidden.

                        var series2 = chart.series.push(new am4charts.CurvedColumnSeries());
                        series2.dataFields.categoryX = "country";

                        series2.dataFields.valueY = "value2";
                        series2.tooltipText = "Tổng tiền nhập {valueY.value}.000.000 VNĐ";
                        series2.columns.template.strokeOpacity = 0;
                        series2.clustered = false;

                        var series3 = chart.series.push(new am4charts.CurvedColumnSeries());
                        series3.dataFields.categoryX = "country";

                        series3.dataFields.valueY = "value3";
                        series3.tooltipText = "Doanh thu {valueY.value}.000.000 VNĐ";
                        series3.columns.template.strokeOpacity = 0;
                        series3.clustered = false;

                        chart.cursor = new am4charts.XYCursor();
                        chart.cursor.maxTooltipDistance = 0;

                        chart.scrollbarX = new am4core.Scrollbar();


                        series.dataItems.template.adapter.add("width", (width, target) => {
                            return am4core.percent(target.valueY / valueAxis.max * 100);
                        })

                        series2.dataItems.template.adapter.add("width", (width, target) => {
                            return am4core.percent(target.valueY / valueAxis.max * 100);
                        })

                        series3.dataItems.template.adapter.add("width", (width, target) => {
                            return am4core.percent(target.valueY / valueAxis.max * 100);
                        })

                        series.columns.template.events.on("parentset", function (event) {
                            event.target.zIndex = valueAxis.max - event.target.dataItem.valueY;
                        })

                        series2.columns.template.events.on("parentset", function (event) {
                            event.target.parent = series.columnsContainer;
                            event.target.zIndex = valueAxis.max - event.target.dataItem.valueY;
                        })

                        series3.columns.template.events.on("parentset", function (event) {
                            event.target.parent = series.columnsContainer;
                            event.target.zIndex = valueAxis.max - event.target.dataItem.valueY;
                        })




                    }); // end am4core.ready()
                    am4core.ready(function () {

                        // Themes begin
                        am4core.useTheme(am4themes_animated);
                        // Themes end

                        // Create chart instance
                        var chart = am4core.create("chartdiv2", am4charts.XYChart);

                        // Export
                        chart.exporting.menu = new am4core.ExportMenu();

                        // Data for both series
                        var data = [{
                            "year": res[0]['Month'],
                            "income": res[0]['TotalSale'] / 1000000,
                            "expenses": res[0]['TotalImport'] / 1000000
                        }, {
                                "year": res[1]['Month'],
                                "income": res[1]['TotalSale'] / 1000000,
                                "expenses": res[1]['TotalImport'] / 1000000
                            }, {
                                "year": res[2]['Month'],
                                "income": res[2]['TotalSale'] / 1000000,
                                "expenses": res[2]['TotalImport'] / 1000000
                            }, {
                                "year": res[3]['Month'],
                                "income": res[3]['TotalSale'] / 1000000,
                                "expenses": res[3]['TotalImport'] / 1000000
                            }, {
                                "year": res[4]['Month'],
                                "income": res[4]['TotalSale'] / 1000000,
                                "expenses": res[4]['TotalImport'] / 1000000
                            }, {
                                "year": res[5]['Month'],
                                "income": res[5]['TotalSale'] / 1000000,
                                "expenses": res[5]['TotalImport'] / 1000000,
                            "strokeWidth": 1,
                            "columnDash": "5,5",
                            "fillOpacity": 0.2,
                            "additional": "(projection)"
                        }];

                        /* Create axes */
                        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                        categoryAxis.dataFields.category = "year";
                        categoryAxis.renderer.minGridDistance = 30;

                        /* Create value axis */
                        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

                        /* Create series */
                        var columnSeries = chart.series.push(new am4charts.ColumnSeries());
                        columnSeries.name = "Thu nhập";
                        columnSeries.dataFields.valueY = "income";
                        columnSeries.dataFields.categoryX = "year";

                        columnSeries.columns.template.tooltipText = "[#fff font-size: 15px]{name} trong tháng {categoryX}:\n[/][#fff font-size: 20px]{valueY}.000.000 VNĐ[/] [#fff]{additional}[/]"
                        columnSeries.columns.template.propertyFields.fillOpacity = "fillOpacity";
                        columnSeries.columns.template.propertyFields.stroke = "stroke";
                        columnSeries.columns.template.propertyFields.strokeWidth = "strokeWidth";
                        columnSeries.columns.template.propertyFields.strokeDasharray = "columnDash";
                        columnSeries.tooltip.label.textAlign = "middle";

                        var lineSeries = chart.series.push(new am4charts.LineSeries());
                        lineSeries.name = "Chi phí";
                        lineSeries.dataFields.valueY = "expenses";
                        lineSeries.dataFields.categoryX = "year";

                        lineSeries.stroke = am4core.color("#fdd400");
                        lineSeries.strokeWidth = 3;
                        lineSeries.propertyFields.strokeDasharray = "lineDash";
                        lineSeries.tooltip.label.textAlign = "middle";

                        var bullet = lineSeries.bullets.push(new am4charts.Bullet());
                        bullet.fill = am4core.color("#fdd400"); // tooltips grab fill from parent by default
                        bullet.tooltipText = "[#fff font-size: 15px]{name} trong tháng {categoryX}:\n[/][#fff font-size: 20px]{valueY}.000.000 VNĐ[/] [#fff]{additional}[/]"
                        var circle = bullet.createChild(am4core.Circle);
                        circle.radius = 4;
                        circle.fill = am4core.color("#fff");
                        circle.strokeWidth = 3;

                        chart.data = data;

                    }); // end am4core.ready()
                    var chart1 = AmCharts.makeChart("dashboard_amchart_3", {
                        "type": "serial",
                        "addClassNames": true,
                        "theme": "light",
                        "path": "../Content/custom/global/plugins/images/",
                        "autoMargins": false,
                        "marginLeft": 30,
                        "marginRight": 8,
                        "marginTop": 10,
                        "marginBottom": 26,
                        "balloon": {
                            "adjustBorderColor": false,
                            "horizontalPadding": 10,
                            "verticalPadding": 8,
                            "color": "#ffffff"
                        },
                        "dataProvider": chartData,
                        "valueAxes": [{
                            "axisAlpha": 0,
                            "position": "left"
                        }],
                        "startDuration": 1,
                        "graphs": [{
                            "alphaField": "alpha",
                            "balloonText": "<span style='font-size:12px;'>[[title]] in [[category]]:<br><span style='font-size:20px;'>[[value]]</span> [[additional]]</span>",
                            "fillAlphas": 1,
                            "title": "Income",
                            "type": "column",
                            "valueField": "income",
                            "dashLengthField": "dashLengthColumn"
                        }, {
                            "id": "graph2",
                            "balloonText": "<span style='font-size:12px;'>[[title]] in [[category]]:<br><span style='font-size:20px;'>[[value]]</span> [[additional]]</span>",
                            "bullet": "round",
                            "lineThickness": 3,
                            "bulletSize": 7,
                            "bulletBorderAlpha": 1,
                            "bulletColor": "#FFFFFF",
                            "useLineColorForBulletBorder": true,
                            "bulletBorderThickness": 3,
                            "fillAlphas": 0,
                            "lineAlpha": 1,
                            "title": "Expenses",
                            "valueField": "expenses"
                        }],
                        "categoryField": "month",
                        "categoryAxis": {
                            "gridPosition": "start",
                            "axisAlpha": 0,
                            "tickLength": 0
                        },
                        "export": {
                            "enabled": true
                        }
                    });
                },
                error: function (err) {
                    console.log(err);
                }
            });
        });
    </script>
    <style>
        #chartdiv {
            width: 100%;
            height: 500px;
        }
    </style>

    <!-- Resources -->


    <!-- Chart code -->
 
}



@*[{
        "month": res[0]['Month'],
        "income": res[0]['TotalSale'] / 1000000,
        "expenses": res[0]['TotalImport'] / 1000000
    }, {
        "month": res[1]['Month'],
        "income": res[1]['TotalSale'] / 1000000,
        "expenses": res[1]['TotalImport'] / 1000000
    }, {
        "month": res[2]['Month'],
        "income": res[2]['TotalSale'] / 1000000,
        "expenses": res[2]['TotalImport'] / 1000000
    }, {
        "month": res[3]['Month'],
        "income": res[3]['TotalSale'] / 1000000,
        "expenses": res[3]['TotalImport'] / 1000000
    }, {
        "month": res[4]['Month'],
        "income": res[4]['TotalSale'] / 1000000,
        "expenses": res[4]['TotalImport'] / 1000000
    }, {
        "month": res[5]['Month'],
        "income": res[5]['TotalSale'] / 1000000,
        "expenses": res[5]['TotalImport'] / 1000000,
        "dashLengthColumn": 5,
        "alpha": 0.2,
        "additional": "(projection)"
    }]*@